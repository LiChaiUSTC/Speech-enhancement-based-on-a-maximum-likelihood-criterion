. $Header: /u/drspeech/repos/feacat/linecat.man,v 1.2 1999/03/01 02:11:17 dpwe Exp $
.de EX		\" Begin Example
.ie \\n(.$ .nr EX \\$1n
.el \{\
.	ie n .nr EX 0n
.	el .nr EX 0n
.\}
.in +\\n(EXu
.if n .sp 1
.if t .sp .5v
.nf
.CW
.ft CB
..
.de EE		\" End example
.in -\\n(EXu
.fi
.}f             \" restore basic text attributes
.if n .sp 1
.if t .sp .5v
..
.de MS
.ie t \&\f(CB\\$1\f(NR(\\$2)\\$3
.el \fI\\$1\fP(\\$2)\\$3
..
.TH LINECAT 1 "$Date: 1999/03/01 02:11:17 $" ICSI "ICSI SPEECH SOFTWARE"
.SH NAME
linecat \- range selection and rearrangement of lines in text files
.SH SYNOPSIS
.B linecat 
\[\fI-o outfile\fR\]
\[\fI-r rangespec\fR\]
\[\fIoptions\fR\]
\[\fIinfile ...\fR\]
.SH DESCRIPTION
.I linecat
reads one or more text files then writes an output file consisting of 
the lines from the input files as specified by the range specification.  
This uses the 
.MS Range 3
range syntax, thus 
.I linecat
can be used as a counterpart to 
.MS feacat 1 
and 
.MS labcat 1 
to sub-select and rearrange text files (such as ID lists or 
transcription files).
.SH OPTIONS
.I labcat
accepts the following options (with defaults in parens).  Argument 
parsing is done by dpwelib's 
.MS cle 3 
and the alternates (separated by "|") and minimum prefixes (marked by 
"?") are shown below.
.TP 1i
.B -o?utfile \fIname\fR ("-")
The name of the output text file.  The default value of "-" indicates 
that the output file is to be written to the standard output.
.TP
.B -r?angespec|-sr|-ur \fIrangeSpec\fR ("all")
Specifies a range of lines to copy, where input lines are 
numbered sequentially from 0, and multiple input files are 
treated as one long file.  This uses the range-specification 
format defined in 
.MS Range 3
modelled after the one in Jeff Bilmes's
.MS pfile_utils 1 ;
briefly, to specify the first ten lines, the range spec would be 
"0:9", and the last ten would be "^9:^0".  
To reverse the first five without the third, 
specify "4,3,1,0".
.IP
Note that there is a single logical numbered line continuum constructed 
from all the input files.  Thus if fileA contains 10 lines and 
fileB has 5, 
.EX
linecat -sr 0,10,9,14 fileA fileB ...
.EE
will output the first line of fileA, then the first line of fileB, 
then the corresponding last lines.
.TP
.B -c?ommentpattern \fIregexp\fR ("")
This pattern, if specified, marks input lines to be ignored.  Some 
source data may have comment lines (for instance, "^#.*") which 
should not be counted when seeking particular line numbers; in those 
cases, this option may be used to define a regexp pattern that will 
pick out the comment lines.
.B NOT YET IMPLEMENTED.
.TP
.B -ind?exbase|-ixb \fIbase\fR (0)
The index associated with the first line of the first file.  By default 
this is zero, meaning that the range 0-9 gives the first ten lines from the 
input file.  However, setting \f4-ixb 1\f1 would give the more widespread 
behavior of the range 1-10 giving the first ten lines (and 0 being 
an illegal line index).  You could also set it to other, perhaps 
negative, values for other effects (i.e. you can view is as a number 
.I subtracted 
from every index generated by the range).
.TP
.B -s?eekable \fI{0|1}\fR (0)
In the default case with seekable=0, input files are read without seeks 
if at all possible i.e. if the requested lines are in ascending order.  
However, with random access among a large number of input files, it 
may be more efficient to scan for the number of lines in each input 
file before subsequent processing; seekable=1 performs this.
.TP
.B -r?epeatutts \fIcount\fR (1)
Each output utterance is processed this number of times, creating 
repeated segments in the output.  This is just to parallel the options 
in 
.MS feacat 1 
and 
.MS labcat 1 ; 
I can't think of any real use for it.
.TP
.B -d?ebug \fIlevel\fR (0)
Debug level passed to the QuickNet library.
.TP
.B -v?erbose
Generate some diagnostic messages, limited mainly to a report of how 
many features, frames and utterances were written at the end, and 
also warnings when utterances or files have fewer components than 
expected (which is usually the case if not operating in 
\f4-indexed\f1 mode).
.SH NOTES/BUGS
The file reading routines use an adaptive input buffer size which has 
been tested on some very long input lines (bn142h.stm) so there should 
be no problems handling long lines.
.SH AUTHOR
Dan Ellis  <dpwe@ICSI.Berkeley.EDU>
.SH SEE ALSO
.MS feacat 1 ,
.MS labcat 1 ,
.MS Range 3 ,
.MS cle 3 .
